# Workflow Composition
# - Event: Something that activates the execution of the workflow
# - Jobs: A set of tasks that execute on the same runner (jobs are named whatever you want)
#   Each job contains Runner, Services (Optional), Steps
# - Runner: The environment where the job runs (e.g. Ubuntu, Windows, macOS)
# - Steps: A sequence of tasks that execute on the same runner
# - Actions: Reusable commands that can be used in steps

name: CI workflow

# Event - `on` specifies the event that triggers the workflow
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - main
  release:
    types:
      - published # e.g. publish Python code to PyPI, Java code to Maven, Docker container to Docker Hub

# Jobs - `jobs` is a list of tasks that run in parallel by default
jobs:
  build: # Job named `build`
    # Runner - `runs-on` specifies the type of runner
    runs-on: ubuntu-latest # Use Ubuntu runner
    container: python:3.9-slim # Use Python container
    services:
      redis:
        image: redis:6-alpine
    #   postgres: # Service name used to access the service
    #     image: postgres:latest
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: pgsecret
    #       POSTGRES_DB: test_db
    #     ports:
    #       - 5432:5432
    #     # Set health checks to wait for the service to be ready
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    # Steps - `steps` is a list of commands that run in sequence
    steps:
      # Actions - require the `uses:` to specifies the action to run
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 service --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit tests with nose
        run: nosetests -v --with-spec --spec-color --with-coverage --cover-package=app
        # env:
        #   DATABASE_URI: redis://localhost:6379
        #   FLASK_APP: service:app

      - name: Upload code coverage
        uses: codecov/codecov-action@v3
        with: # Configuration options for the action
          version: "v0.1.13"
